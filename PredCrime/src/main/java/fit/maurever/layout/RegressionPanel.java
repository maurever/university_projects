package fit.maurever.layout;

import de.erichseifert.gral.data.DataTable;
import de.erichseifert.gral.plots.XYPlot;
import de.erichseifert.gral.plots.lines.LineRenderer;
import de.erichseifert.gral.plots.lines.SmoothLineRenderer2D;
import de.erichseifert.gral.plots.points.DefaultPointRenderer2D;
import de.erichseifert.gral.plots.points.PointRenderer;
import de.erichseifert.gral.ui.InteractivePanel;
import de.erichseifert.gral.util.Insets2D;
import fit.maurever.implementation.regression.KernelRidgeRegressionModel;
import fit.maurever.implementation.regression.NPolynomialRegressionModel;
import fit.maurever.implementation.regression.PolynomialRegressionCrossValidation;
import fit.maurever.implementation.regression.Regression;
import fit.maurever.implementation.regression.RegressionTypes;
import fit.maurever.implementation.regression.SimpleLinearModel;
import fit.maurever.implementation.regression.SinusLinearModel;
import fit.maurever.utils.DateUtil;
import fit.maurever.utils.FileProcessing;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.geom.Ellipse2D;
import de.erichseifert.gral.io.plots.DrawableWriter;
import de.erichseifert.gral.io.plots.DrawableWriterFactory;
import fit.maurever.implementation.regression.ExponencialSmoothingModel;
import fit.maurever.utils.PdfGenerator;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * Regression Panel.
 * @author Veronika Maurerova <veronika at maurerova.cz>
 */
public class RegressionPanel extends javax.swing.JPanel {

    /**
     * Creates new form GraphPanel
     */
    public RegressionPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportPdfCheckboxGroup = new javax.swing.ButtonGroup();
        graphViewPanel = new javax.swing.JPanel();
        modelPanel = new javax.swing.JPanel();
        simpleButton = new javax.swing.JButton();
        sinusButton = new javax.swing.JButton();
        polynom1Button = new javax.swing.JButton();
        polynom2Button = new javax.swing.JButton();
        kernelButton = new javax.swing.JButton();
        exponencialButton = new javax.swing.JButton();
        modelLabel = new javax.swing.JLabel();
        additionalInformationPanel = new javax.swing.JPanel();
        numberPredictedValuesLabel = new javax.swing.JLabel();
        numberPredictedValuesButton = new javax.swing.JButton();
        numberPredictedValuesField = new javax.swing.JTextField();
        additionalInformationLabel = new javax.swing.JLabel();
        periodLabel = new javax.swing.JLabel();
        periodField = new javax.swing.JTextField();
        periodButton = new javax.swing.JButton();
        degreeField = new javax.swing.JTextField();
        degreeLabel = new javax.swing.JLabel();
        degreeButton = new javax.swing.JButton();
        alphaLabel = new javax.swing.JLabel();
        alphaField = new javax.swing.JTextField();
        alphaButton = new javax.swing.JButton();
        predictedValuesPanel = new javax.swing.JPanel();
        predictedValuesScrollPane1 = new javax.swing.JScrollPane();
        predictedValuesTable = new javax.swing.JTable();
        predictedValuesLable = new javax.swing.JLabel();
        exportPanel = new javax.swing.JPanel();
        exportPdfButton = new javax.swing.JButton();
        exportCsvTableValuesButton = new javax.swing.JButton();
        exportCsvLabel = new javax.swing.JLabel();
        exportCsvRegressionInformationButton = new javax.swing.JButton();
        exportPdfLabel = new javax.swing.JLabel();
        tableCheckBox = new javax.swing.JCheckBox();
        infoCheckBox = new javax.swing.JCheckBox();
        graphCheckBox = new javax.swing.JCheckBox();
        graphLabel = new javax.swing.JLabel();
        regressionInformationScrollPanel = new javax.swing.JScrollPane();
        regressionInformationPanel = new javax.swing.JPanel();
        regressionInformationLabel = new javax.swing.JLabel();
        regressionInformationLabel1 = new javax.swing.JLabel();
        regressionInfromationHeaderLabel = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1150, 600));

        graphViewPanel.setBackground(new java.awt.Color(254, 254, 254));

        javax.swing.GroupLayout graphViewPanelLayout = new javax.swing.GroupLayout(graphViewPanel);
        graphViewPanel.setLayout(graphViewPanelLayout);
        graphViewPanelLayout.setHorizontalGroup(
            graphViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphViewPanelLayout.setVerticalGroup(
            graphViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );

        modelPanel.setBackground(java.awt.Color.white);

        simpleButton.setText("Simple Linear");
        simpleButton.setToolTipText("");
        simpleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleButtonActionPerformed(evt);
            }
        });

        sinusButton.setText("Simple Sinus");
        sinusButton.setToolTipText("");
        sinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinusButtonActionPerformed(evt);
            }
        });

        polynom1Button.setText("Polynomial (1)");
        polynom1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polynom1ButtonActionPerformed(evt);
            }
        });

        polynom2Button.setText("Polynomial (2)");
        polynom2Button.setToolTipText("");
        polynom2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polynom2ButtonActionPerformed(evt);
            }
        });

        kernelButton.setText("Kernel Ridge");
        kernelButton.setToolTipText("");
        kernelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kernelButtonActionPerformed(evt);
            }
        });

        exponencialButton.setText("Exponential Smoothing");
        exponencialButton.setToolTipText("");
        exponencialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponencialButtonActionPerformed(evt);
            }
        });

        modelLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        modelLabel.setText("Choose Model: ");

        javax.swing.GroupLayout modelPanelLayout = new javax.swing.GroupLayout(modelPanel);
        modelPanel.setLayout(modelPanelLayout);
        modelPanelLayout.setHorizontalGroup(
            modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simpleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sinusButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polynom1Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(polynom2Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kernelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exponencialButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modelPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exponencialButton, kernelButton, polynom1Button, polynom2Button, sinusButton});

        modelPanelLayout.setVerticalGroup(
            modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleButton)
                    .addComponent(sinusButton)
                    .addComponent(polynom1Button)
                    .addComponent(polynom2Button)
                    .addComponent(kernelButton)
                    .addComponent(exponencialButton)
                    .addComponent(modelLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modelPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {exponencialButton, kernelButton, polynom1Button, polynom2Button, simpleButton, sinusButton});

        additionalInformationPanel.setBackground(java.awt.Color.white);

        numberPredictedValuesLabel.setFont(new java.awt.Font("DejaVu Sans", 2, 12)); // NOI18N
        numberPredictedValuesLabel.setText("Number of predicted values: ");

        numberPredictedValuesButton.setText(" Set number");
        numberPredictedValuesButton.setToolTipText("");
        numberPredictedValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberPredictedValuesButtonActionPerformed(evt);
            }
        });

        numberPredictedValuesField.setBackground(java.awt.Color.white);

        additionalInformationLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        additionalInformationLabel.setText("Set additional information:");

        periodLabel.setFont(new java.awt.Font("DejaVu Sans", 2, 12)); // NOI18N
        periodLabel.setText("Period of sinus: ");

        periodField.setBackground(java.awt.Color.white);

        periodButton.setText("Set period");
        periodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodButtonActionPerformed(evt);
            }
        });

        degreeField.setBackground(java.awt.Color.white);

        degreeLabel.setFont(new java.awt.Font("DejaVu Sans", 2, 12)); // NOI18N
        degreeLabel.setText("Degree of polynom: ");

        degreeButton.setText("Set degree");
        degreeButton.setToolTipText("");
        degreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeButtonActionPerformed(evt);
            }
        });

        alphaLabel.setFont(new java.awt.Font("DejaVu Sans", 2, 12)); // NOI18N
        alphaLabel.setText("Alpha:");

        alphaButton.setText("Set alpha");
        alphaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout additionalInformationPanelLayout = new javax.swing.GroupLayout(additionalInformationPanel);
        additionalInformationPanel.setLayout(additionalInformationPanelLayout);
        additionalInformationPanelLayout.setHorizontalGroup(
            additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(additionalInformationPanelLayout.createSequentialGroup()
                .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(additionalInformationPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(additionalInformationLabel))
                    .addGroup(additionalInformationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberPredictedValuesLabel)
                            .addComponent(periodLabel)
                            .addComponent(degreeLabel)
                            .addComponent(alphaLabel))
                        .addGap(18, 18, 18)
                        .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(periodField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(numberPredictedValuesField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(degreeField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(alphaField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numberPredictedValuesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(periodButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(degreeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alphaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        additionalInformationPanelLayout.setVerticalGroup(
            additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(additionalInformationPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(additionalInformationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberPredictedValuesLabel)
                    .addComponent(numberPredictedValuesButton)
                    .addComponent(numberPredictedValuesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodButton)
                    .addComponent(periodLabel)
                    .addComponent(periodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(degreeButton)
                    .addComponent(degreeLabel)
                    .addComponent(degreeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(additionalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphaButton)
                    .addComponent(alphaLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        predictedValuesPanel.setBackground(java.awt.Color.white);
        predictedValuesPanel.setMaximumSize(new java.awt.Dimension(244, 221));
        predictedValuesPanel.setName(""); // NOI18N
        predictedValuesPanel.setPreferredSize(new java.awt.Dimension(244, 221));
        predictedValuesPanel.setRequestFocusEnabled(false);

        predictedValuesScrollPane1.setMaximumSize(new java.awt.Dimension(220, 151));
        predictedValuesScrollPane1.setName(""); // NOI18N
        predictedValuesScrollPane1.setPreferredSize(new java.awt.Dimension(220, 151));

        predictedValuesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Unit", "Predicted value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        predictedValuesTable.setMaximumSize(new java.awt.Dimension(3000, 72));
        predictedValuesTable.setName(""); // NOI18N
        predictedValuesScrollPane1.setViewportView(predictedValuesTable);
        if (predictedValuesTable.getColumnModel().getColumnCount() > 0) {
            predictedValuesTable.getColumnModel().getColumn(1).setResizable(false);
        }

        predictedValuesLable.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        predictedValuesLable.setText("Predicted values:");

        javax.swing.GroupLayout predictedValuesPanelLayout = new javax.swing.GroupLayout(predictedValuesPanel);
        predictedValuesPanel.setLayout(predictedValuesPanelLayout);
        predictedValuesPanelLayout.setHorizontalGroup(
            predictedValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictedValuesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(predictedValuesLable)
                .addGap(82, 82, 82))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, predictedValuesPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(predictedValuesScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        predictedValuesPanelLayout.setVerticalGroup(
            predictedValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, predictedValuesPanelLayout.createSequentialGroup()
                .addComponent(predictedValuesLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(predictedValuesScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exportPanel.setBackground(java.awt.Color.white);
        exportPanel.setMaximumSize(new java.awt.Dimension(121, 221));

        exportPdfButton.setText("Export to PDF");
        exportPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPdfButtonActionPerformed(evt);
            }
        });

        exportCsvTableValuesButton.setText("Predicted values table");
        exportCsvTableValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsvTableValuesButtonActionPerformed(evt);
            }
        });

        exportCsvLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        exportCsvLabel.setText("Export to CSV:");

        exportCsvRegressionInformationButton.setText("Regression information");
        exportCsvRegressionInformationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsvRegressionInformationButtonActionPerformed(evt);
            }
        });

        exportPdfLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        exportPdfLabel.setText("Export to PDF:");

        tableCheckBox.setBackground(java.awt.Color.white);
        tableCheckBox.setText("Predicted values table");

        infoCheckBox.setBackground(java.awt.Color.white);
        infoCheckBox.setText("Regression information");

        graphCheckBox.setBackground(java.awt.Color.white);
        graphCheckBox.setText("Graph");

        javax.swing.GroupLayout exportPanelLayout = new javax.swing.GroupLayout(exportPanel);
        exportPanel.setLayout(exportPanelLayout);
        exportPanelLayout.setHorizontalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportCsvLabel)
                    .addComponent(exportPdfLabel)
                    .addComponent(graphCheckBox)
                    .addComponent(tableCheckBox)
                    .addComponent(exportPdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoCheckBox)
                    .addComponent(exportCsvTableValuesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportCsvRegressionInformationButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exportPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exportCsvRegressionInformationButton, exportCsvTableValuesButton, exportPdfButton});

        exportPanelLayout.setVerticalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addComponent(exportCsvLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportCsvTableValuesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportCsvRegressionInformationButton)
                .addGap(18, 18, 18)
                .addComponent(exportPdfLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportPdfButton))
        );

        graphCheckBox.getAccessibleContext().setAccessibleName("graphCheckBox");

        graphLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        graphLabel.setText("Graph:");

        regressionInformationScrollPanel.setBackground(java.awt.Color.white);
        regressionInformationScrollPanel.setForeground(java.awt.Color.white);
        regressionInformationScrollPanel.setMaximumSize(new java.awt.Dimension(150, 150));
        regressionInformationScrollPanel.setPreferredSize(new java.awt.Dimension(150, 150));

        regressionInformationPanel.setBackground(java.awt.Color.white);
        regressionInformationPanel.setBorder(null);
        regressionInformationPanel.setForeground(java.awt.Color.white);
        regressionInformationPanel.setToolTipText("");
        regressionInformationPanel.setFocusable(false);
        regressionInformationPanel.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        regressionInformationPanel.setMaximumSize(new java.awt.Dimension(3000, 3000));
        regressionInformationPanel.setName(""); // NOI18N
        regressionInformationPanel.setPreferredSize(new java.awt.Dimension(221, 350));
        regressionInformationPanel.setRequestFocusEnabled(false);

        regressionInformationLabel1.setFont(new java.awt.Font("DejaVu Sans", 2, 10)); // NOI18N
        regressionInformationLabel1.setText("Information");

        javax.swing.GroupLayout regressionInformationPanelLayout = new javax.swing.GroupLayout(regressionInformationPanel);
        regressionInformationPanel.setLayout(regressionInformationPanelLayout);
        regressionInformationPanelLayout.setHorizontalGroup(
            regressionInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regressionInformationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(regressionInformationLabel)
                .addGap(294, 294, 294))
            .addGroup(regressionInformationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regressionInformationLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        regressionInformationPanelLayout.setVerticalGroup(
            regressionInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regressionInformationPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(regressionInformationLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(regressionInformationLabel)
                .addContainerGap(317, Short.MAX_VALUE))
        );

        regressionInformationScrollPanel.setViewportView(regressionInformationPanel);

        regressionInfromationHeaderLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        regressionInfromationHeaderLabel.setText("Regression information:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(graphLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(additionalInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(predictedValuesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(regressionInfromationHeaderLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(regressionInformationScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(additionalInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(predictedValuesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(regressionInfromationHeaderLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(regressionInformationScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addComponent(graphLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportCsvTableValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCsvTableValuesButtonActionPerformed
        FileProcessing.saveDataFromArrayToFile(predictedDataArray, DateUtil.getDateTime_ddMMyyyy() + "_predicted_value_csv_export.csv");
    }//GEN-LAST:event_exportCsvTableValuesButtonActionPerformed

    private void exponencialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponencialButtonActionPerformed
        this.regressionType = RegressionTypes.EXP;
        MainFrame.statusbar.setText("Exponencial smoothing regression model was selected.");
        updateDataPanels();
    }//GEN-LAST:event_exponencialButtonActionPerformed

    private void simpleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleButtonActionPerformed
        this.regressionType = RegressionTypes.SIMPLE;
        MainFrame.statusbar.setText("Simple linear regression model was selected.");
        updateDataPanels();
    }//GEN-LAST:event_simpleButtonActionPerformed

    private void sinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinusButtonActionPerformed
        this.regressionType = RegressionTypes.SINUS;
        MainFrame.statusbar.setText("Sinus linear regression model was selected.");
        updateDataPanels();
    }//GEN-LAST:event_sinusButtonActionPerformed

    private void polynom1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polynom1ButtonActionPerformed
        this.regressionType = RegressionTypes.POLYNOM;
        MainFrame.statusbar.setText("Polynomial (1) regression model was selected.");
        updateDataPanels();
    }//GEN-LAST:event_polynom1ButtonActionPerformed

    private void polynom2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polynom2ButtonActionPerformed
        this.regressionType = RegressionTypes.POLYNOM2;
        MainFrame.statusbar.setText("Polynomial (2) regression model was selected.");
        updateDataPanels();
    }//GEN-LAST:event_polynom2ButtonActionPerformed

    private void kernelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kernelButtonActionPerformed
        this.regressionType = RegressionTypes.KRR;
        MainFrame.statusbar.setText("Kernel ridge regression model is not implemented yet.");
        //MainFrame.statusbar.setText("Kernel ridge regression model was selected.");
        //updateDataPanels();
    }//GEN-LAST:event_kernelButtonActionPerformed

    private void numberPredictedValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberPredictedValuesButtonActionPerformed
        try {
            int newNumber = Integer.parseInt(numberPredictedValuesField.getText());
            MainFrame.statusbar.setText("Number of predicted values was changed from " + this.numberPredictedX + " to " + newNumber + ".");
            this.numberPredictedX = newNumber;
            updateDataPanels();
        } catch (Exception e) {
            MainFrame.statusbar.setText("Number of predicted values was not changed. Wrong input '" + numberPredictedValuesField.getText() + "'.");
        }
    }//GEN-LAST:event_numberPredictedValuesButtonActionPerformed

    private void periodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodButtonActionPerformed
        try {
            int newPeriod = Integer.parseInt(periodField.getText());
            MainFrame.statusbar.setText("Sinus period was changed from " + this.period + " to " + newPeriod + ".");
            this.period = newPeriod;
            updateDataPanels();
        } catch (Exception e) {
            MainFrame.statusbar.setText("Sinus period was not changed. Wrong input '" + periodField.getText() + "'.");
        }
    }//GEN-LAST:event_periodButtonActionPerformed

    private void degreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeButtonActionPerformed
        try {
            int newDegree = Integer.parseInt(degreeField.getText());
            MainFrame.statusbar.setText("Polynom degree was changed from " + this.polynomDegree + " to " + newDegree + ".");
            this.polynomDegree = newDegree;
            updateDataPanels();
        } catch (Exception e) {
            MainFrame.statusbar.setText("Polynom degree was not changed. Wrong input '" + degreeField.getText() + "'.");
        }
    }//GEN-LAST:event_degreeButtonActionPerformed

    private void exportCsvRegressionInformationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCsvRegressionInformationButtonActionPerformed
        FileProcessing.saveDataFromArrayToFile(regression.getInformationInArray(), DateUtil.getDateTime_ddMMyyyy() + "_regression_information_csv_export.csv");
    }//GEN-LAST:event_exportCsvRegressionInformationButtonActionPerformed

    private void exportPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPdfButtonActionPerformed
        String[][] info = null;
        Double[][] table = null;
        String graphFileName = null;
        if (infoCheckBox.isSelected()) {
            info = regression.getInformationInArray();
        }
        if (tableCheckBox.isSelected()) {
            table = predictedDataArray;
        }
        if (graphCheckBox.isSelected()) {
            graphFileName = getNameAndSavePlotFile();
        }
        PdfGenerator.createPdf(regressionType.getType() + "_regression_" + DateUtil.getDateTime_ddMMyyyy() + ".pdf", info, table, graphFileName);
    }//GEN-LAST:event_exportPdfButtonActionPerformed

    private void alphaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaButtonActionPerformed
        double newAlpha = Double.parseDouble(alphaField.getText());
        if (newAlpha > 0 && newAlpha < 1) {
            MainFrame.statusbar.setText("Alpha was changed from " + this.alpha + " to " + newAlpha + ".");
            this.alpha = newAlpha;
            updateDataPanels();
        } else {
            MainFrame.statusbar.setText("Alpha have to be greater than 0 and less than 1.");
        }
    }//GEN-LAST:event_alphaButtonActionPerformed

    public void setInsertedValues(Double[][] insertedValues) {
        this.insertedValues = insertedValues;
    }

    public void updateGraphViewPanel() {
        graphPlot = new XYPlot(insertedData, countedPredictedDataLine, predictedData);
        PointRenderer points = new DefaultPointRenderer2D();
        points.setShape(new Ellipse2D.Double(-3.0, -3.0, 6.0, 6.0));
        graphPlot.setPointRenderer(insertedData, points);
        graphPlot.getPointRenderer(insertedData).setColor(new Color(1.0f, 0.0f, 0.0f));

        LineRenderer lines2 = new SmoothLineRenderer2D();
        graphPlot.setLineRenderer(countedPredictedDataLine, lines2);
        graphPlot.getLineRenderer(countedPredictedDataLine).setColor(new Color(0.0f, 0.3f, 1.0f));
        PointRenderer points2 = new DefaultPointRenderer2D();
        graphPlot.setPointRenderer(countedPredictedDataLine, points2);
        graphPlot.getPointRenderer(countedPredictedDataLine).setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));

        LineRenderer lines3 = new SmoothLineRenderer2D();
        graphPlot.setLineRenderer(predictedData, lines3);
        graphPlot.getLineRenderer(predictedData).setColor(new Color(0.0f, 0.3f, 1.0f));
        PointRenderer points3 = new DefaultPointRenderer2D();
        points3.setShape(new Ellipse2D.Double(-3.0, -3.0, 6.0, 6.0));
        graphPlot.setPointRenderer(predictedData, points3);
        graphPlot.getPointRenderer(predictedData).setColor(new Color(0.0f, 0.0f, 0.0f));

        double insetsTop = 5.0, insetsLeft = 60.0, insetsBottom = 60.0, insetsRight = 20.0;

        graphPlot.setInsets(new Insets2D.Double(insetsTop, insetsLeft, insetsBottom, insetsRight));
        graphPlot.getAxisRenderer(XYPlot.AXIS_X).setLabel(axisX);
        graphPlot.getAxisRenderer(XYPlot.AXIS_Y).setLabel(axisY);
        graphPlot.setBackground(Color.white);

        InteractivePanel graphPanel = new InteractivePanel(graphPlot);
        graphPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        graphPanel.setBackground(Color.white);
        graphPanel.validate();
        graphPanel.repaint();

        this.graphViewPanel.removeAll();
        this.graphViewPanel.setLayout(new BorderLayout());
        this.graphViewPanel.add(graphPanel, BorderLayout.CENTER);
    }

    public void updatePredictedValuesTable() {
        if (predictedDataArray != null) {
            predictedValuesTable.setModel(new javax.swing.table.DefaultTableModel(
                    predictedDataArray,
                    new String[]{
                        "Unit", "Predicted value"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.Double.class, java.lang.Double.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }
    }

    public void updateRegressionInformation() {
        regressionInformationLabel1.setText(regression.toHtmlString());
    }

    public void resetInsertedValues(Double[][] newInsertedValues) {
        if (newInsertedValues != null) {
            this.setInsertedValues(newInsertedValues);
            updateDataPanels();
        } else {
            insertedData = new DataTable(Double.class, Double.class);
        }
        if (countedPredictedDataLine == null || countedPredictedDataLine.getRowCount() == 0) {
            if (countedData == null || countedData.getRowCount() == 0) {
                countedPredictedDataLine = new DataTable(Double.class, Double.class);
            } else {
                countedPredictedDataLine = countedData;
            }
        }
    }

    public void updateDataPanels() {
        if (insertedValues != null) {
            periodButton.setEnabled(false);
            degreeButton.setEnabled(false);
            alphaButton.setEnabled(false);
            this.setRegression();
            regression.process();
            regression.predict(numberPredictedX);
            if (regression.getInsertedData() != null) {
                insertedData = regression.getInsertedData();
            } else {
                insertedData = new DataTable(Double.class, Double.class);
            }
            countedData = regression.getCountedData();
            countedPredictedDataLine = regression.getCountedPredictedDataLine();
            predictedData = regression.getPredictedData();
            predictedDataArray = regression.getPredictedDataArray();
            updateGraphViewPanel();
            updatePredictedValuesTable();
            updateRegressionInformation();
            MainFrame.statusbar.setText("Information is loaded. ");
        } else {
            MainFrame.statusbar.setText("No inserted data!");
        }
    }

    public void setRegression() {
        if (regressionType.equals(RegressionTypes.SIMPLE)) {
            regression = new SimpleLinearModel(insertedValues);
        } else if (regressionType.equals(RegressionTypes.SINUS)) {
            periodButton.setEnabled(true);
            regression = new SinusLinearModel(insertedValues, period);
        } else if (regressionType.equals(RegressionTypes.POLYNOM)) {
            degreeButton.setEnabled(true);
            if (polynomDegree <= 0 || polynomDegree > 10) {
                PolynomialRegressionCrossValidation cv = new PolynomialRegressionCrossValidation(10, 3, insertedValues);
                polynomDegree = cv.getBestPolynomialRegressionDegree();
                regression = new NPolynomialRegressionModel(insertedValues, polynomDegree);
            }
            regression = new NPolynomialRegressionModel(insertedValues, polynomDegree);
        } else if (regressionType.equals(RegressionTypes.POLYNOM2)) {
            PolynomialRegressionCrossValidation cv = new PolynomialRegressionCrossValidation(10, 3, insertedValues);
            polynomDegree = cv.getBestPolynomialRegressionDegreeWindow();
            regression = new NPolynomialRegressionModel(insertedValues, polynomDegree);
        } else if (regressionType.equals(RegressionTypes.KRR)) {
            regression = new KernelRidgeRegressionModel(insertedValues);
        } else if (regressionType.equals(RegressionTypes.EXP)) {
            alphaButton.setEnabled(true);
            regression = new ExponencialSmoothingModel(insertedValues, this.alpha);
        }
    }

    public String getNameAndSavePlotFile() {
        String fileName = regressionType.getType() + "_plot_" + DateUtil.getDateTime_ddMMyyyy_HHmm() + ".png";
        File file = new File(fileName);
        try {
            if (graphPlot != null) {
                DrawableWriter writer = DrawableWriterFactory.getInstance().get("image/png");
                writer.write(graphPlot, new FileOutputStream(file), 800, 400);
                MainFrame.statusbar.setText("Graph write in file with name '" + fileName + "'.");
                return fileName;
            } else {
                MainFrame.statusbar.setText("Graph is not inicialized yet.");
            }
        } catch (IOException e) {
            MainFrame.statusbar.setText("Graph write IO error.");
            e.printStackTrace();
        }
        return null;
    }

    public void setAxisX(String axisX) {
        this.axisX = axisX;
    }

    public void setAxisY(String axisY) {
        this.axisY = axisY;
    }

    public int numberPredictedX = 5;
    double period = 2.0;
    int polynomDegree = 0;
    double alpha = 0.5;

    private DataTable insertedData;
    private DataTable countedPredictedDataLine;
    private DataTable countedData;
    private DataTable predictedData;

    private Double[][] insertedValues;
    private Double[][] predictedDataArray;

    private Regression regression;
    private RegressionTypes regressionType = RegressionTypes.SIMPLE;

    private XYPlot graphPlot;
    private String axisX;
    private String axisY;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel additionalInformationLabel;
    private javax.swing.JPanel additionalInformationPanel;
    private javax.swing.JButton alphaButton;
    private javax.swing.JTextField alphaField;
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JButton degreeButton;
    private javax.swing.JTextField degreeField;
    private javax.swing.JLabel degreeLabel;
    private javax.swing.JButton exponencialButton;
    private javax.swing.JLabel exportCsvLabel;
    private javax.swing.JButton exportCsvRegressionInformationButton;
    private javax.swing.JButton exportCsvTableValuesButton;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JButton exportPdfButton;
    private javax.swing.ButtonGroup exportPdfCheckboxGroup;
    private javax.swing.JLabel exportPdfLabel;
    private javax.swing.JCheckBox graphCheckBox;
    private javax.swing.JLabel graphLabel;
    private javax.swing.JPanel graphViewPanel;
    private javax.swing.JCheckBox infoCheckBox;
    private javax.swing.JButton kernelButton;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JPanel modelPanel;
    private javax.swing.JButton numberPredictedValuesButton;
    private javax.swing.JTextField numberPredictedValuesField;
    private javax.swing.JLabel numberPredictedValuesLabel;
    private javax.swing.JButton periodButton;
    private javax.swing.JTextField periodField;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JButton polynom1Button;
    private javax.swing.JButton polynom2Button;
    private javax.swing.JLabel predictedValuesLable;
    private javax.swing.JPanel predictedValuesPanel;
    private javax.swing.JScrollPane predictedValuesScrollPane1;
    private javax.swing.JTable predictedValuesTable;
    private javax.swing.JLabel regressionInformationLabel;
    private javax.swing.JLabel regressionInformationLabel1;
    private javax.swing.JPanel regressionInformationPanel;
    private javax.swing.JScrollPane regressionInformationScrollPanel;
    private javax.swing.JLabel regressionInfromationHeaderLabel;
    private javax.swing.JButton simpleButton;
    private javax.swing.JButton sinusButton;
    private javax.swing.JCheckBox tableCheckBox;
    // End of variables declaration//GEN-END:variables
}
